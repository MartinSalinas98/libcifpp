# makefile for libcif++

.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @BOOST_CPPFLAGS@ @LIBBZ2_CPPFLAGS@
LDFLAGS				= @LDFLAGS@ @LIBS@ @BOOST_LDFLAGS@ @LIBBZ2_LDFLAGS@
LIBS				= @LIBS@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
includedir			= @includedir@

LIB_NAME			= @PACKAGE_NAME@
LIB_TARGET			= $(LIB_NAME).la

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status --recheck

# libtool stuff

LIBTOOL = $(SHELL) ./libtool
CXXCOMPILE = $(LIBTOOL) --silent --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@

# main build variables
CXXFLAGS            += -I. -pthread -I include/
CXXFLAGS            += -Wall -Wno-multichar

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O3
DEFINES				+= NDEBUG
endif

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

LIBCIF_SRC		= AtomShape.cpp \
				  AtomType.cpp \
				  BondMap.cpp \
				  Cif2PDB.cpp \
				  Cif++.cpp \
				  CifParser.cpp \
				  CifUtils.cpp \
				  CifValidator.cpp \
				  Compound.cpp \
				  DistanceMap.cpp \
				  FixDMC.cpp \
				  MapMaker.cpp \
				  PDB2Cif.cpp \
				  PDB2CifRemark3.cpp \
				  Point.cpp \
				  ResolutionCalculator.cpp \
				  Secondary.cpp \
				  Statistics.cpp \
				  Structure.cpp \
				  Symmetry.cpp \
				  TlsParser.cpp

SOURCES			= $(addprefix src/,$(LIBCIF_SRC))
OBJECTS			= $(addprefix $(OBJDIR)/, $(notdir $(SOURCES:%.cpp=%.lo)))

# Special rules to generate symmetry operation number table
tools/symop-map-generator: tools/symop-map-generator.cpp

src/SymOpTable_data.cpp: tools/symop-map-generator $(CLIBD)/symop.lib
	tools/symop-map-generator > $@

$(OBJDIR)/Symmetry.lo: src/SymOpTable_data.cpp

$(LIB_TARGET): $(OBJECTS)
	$(CXXLINK) -rpath $(libdir) $(OBJECTS) $(LIBS)

libs: $(LIB_TARGET)
.PHONY: libs

all: libs
.PHONY: all

# install-libs: $(SHARED_LIB)
# 	install -d $(LIBDIR)
# 	install $(SHARED_LIB) $(LIBDIR)/$(SHARED_LIB_NAME)
# 	strip --strip-unneeded $(LIBDIR)/$(SHARED_LIB_NAME)
# 	ln -Tfs $(SHARED_LIB_NAME) $(LIBDIR)/$(SO_NAME)
# 	ln -Tfs $(SHARED_LIB_NAME) $(LIBDIR)/$(LIB_NAME).so
# 	$(LD_CONFIG) -n $(LIBDIR)

# install-dev: $(STATIC_LIB)
# 	install -d $(LIBDIR) $(INCDIR)/zeep/xml $(INCDIR)/zeep/http $(INCDIR)/zeep/http/webapp
# 	for f in $(HEADERS); do install ../include/$$f $(INCDIR)/$$f; done
# 	install $(STATIC_LIB) $(LIBDIR)/$(STATIC_LIB_NAME)
# 	strip -SX $(LIBDIR)/$(STATIC_LIB_NAME)

# install: install-libs install-dev

-include $(OBJECTS:%.lo=%.d)

$(OBJECTS:.lo=.d):

$(OBJDIR)/%.lo: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXXCOMPILE) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) $(CXXFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

.PHONY: clean
clean:
	rm -rf .libs $(OBJDIR)/* $(LIB_TARGET)

.PHONY: distclean
distclean: clean
	rm -f libtool config.lt
	rm -f config.status config.cache config.log configure.lineno config.status.lineno
	rm -f GNUmakefile

# Test rules

BOOST_LIBS = iostreams thread filesystem timer chrono regex
CLIPPER_LIBS = core ccp4
CLIPPER_LIBS := $(CLIPPER_LIBS:%=-lclipper-%)

define TEST_template =

-include $$(OBJDIR)/$(1)-test.d

$(1)_OBJECTS = $$(OBJDIR)/$(1)-test.o

test/$(1)-test: $(LIB_TARGET) $$($(1)_OBJECTS)
	@ echo ">>> building $(1)-test"
	$(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$($(1)_OBJECTS) -L.libs -Wl,-rpath /srv/ccp4-7.1/lib -lbz2 -lz -lcif++ $(CLIPPER_LIBS) $(BOOST_LIBS:%=-lboost_%) $(LIBS) -lstdc++fs

.PHONY: $(1)-test
$(1)-test: test/$(1)-test
	cd test; ./$(1)-test $$($(1)_PARAMS)

endef

TESTS = unit

$(foreach part,$(TESTS),$(eval $(call TEST_template,$(part))))

.PHONY: test
test: $(TESTS:%=%-test)

dist-clean: clean

FORCE:
